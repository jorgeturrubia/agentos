---
title: Code Style Guide
description: Global code style rules for Agent OS projects
version: 2.0
strict_mode: true
---

# Code Style Guide

```yaml
meta:
  context: "Global code style rules for Agent OS projects"
  version: 2.0
  updated: "2025-08-06"
```

## General Formatting Rules

```yaml
general_formatting:
  context_check:
    implementation: |
      # Check if General Formatting section already read in current context
      if [[ "$GENERAL_FORMATTING_IN_CONTEXT" == "true" ]]; then
        echo "SKIP: Re-reading this section"
        echo "NOTE: Using General Formatting rules already in context"
      else
        echo "READ: The following formatting rules"
      fi
  
  indentation:
    - "Use 2 spaces for indentation (never tabs)"
    - "Maintain consistent indentation throughout files"
    - "Align nested structures for readability"
  
  naming_conventions:
    - type: "Methods and Variables"
      style: "snake_case"
      examples: ["user_profile", "calculate_total"]
    
    - type: "Classes and Modules"
      style: "PascalCase"
      examples: ["UserProfile", "PaymentProcessor"]
    
    - type: "Constants"
      style: "UPPER_SNAKE_CASE"
      examples: ["MAX_RETRY_COUNT"]
  
  string_formatting:
    - "Use single quotes for strings: `'Hello World'`"
    - "Use double quotes only when interpolation is needed"
    - "Use template literals for multi-line strings or complex interpolation"
  
  code_comments:
    - "Add brief comments above non-obvious business logic"
    - "Document complex algorithms or calculations"
    - "Explain the \"why\" behind implementation choices"
    - "Never remove existing comments unless removing the associated code"
    - "Update comments when modifying code to maintain accuracy"
    - "Keep comments concise and relevant"
```

## Language-Specific Style Guides

```yaml
html_css_tailwind_style:
  context_check:
    implementation: |
      # Check if current task involves HTML, CSS, or TailwindCSS
      if [[ "$TASK_INVOLVES_HTML_CSS_TAILWIND" == "true" ]]; then
        if [[ "$HTML_STYLE_IN_CONTEXT" == "true" && "$CSS_STYLE_IN_CONTEXT" == "true" ]]; then
          echo "SKIP: Re-reading these files"
          echo "NOTE: Using HTML/CSS style guides already in context"
        else
          echo "Loading HTML/CSS style guides..."
          
          # Context fetcher strategy
          if [[ "$CURRENT_AGENT" == "claude-code" && "$CONTEXT_FETCHER_EXISTS" == "true" ]]; then
            echo "USE: context-fetcher agent"
            echo "REQUEST: Get HTML formatting rules from code-style/html-style.yaml"
            echo "REQUEST: Get CSS and TailwindCSS rules from code-style/css-style.yaml"
            echo "PROCESS: Returned style rules"
          else
            echo "Read the following style guides (only if not already in context):"
            if [[ "$HTML_STYLE_IN_CONTEXT" != "true" ]]; then
              echo "- Read: standards/code-style/html-style.yaml"
            fi
            if [[ "$CSS_STYLE_IN_CONTEXT" != "true" ]]; then
              echo "- Read: standards/code-style/css-style.yaml"
            fi
          fi
        fi
      else
        echo "SKIP: HTML/CSS style guides not relevant to current task"
      fi
  
  invocation:
    syntax: |
      ```invoke-agent
      agent: context-fetcher
      action: read
      params:
        file: "standards/code-style/html-style.yaml"
        return: "content_only"
      ```
```

```yaml
javascript_style:
  context_check:
    implementation: |
      # Check if current task involves JavaScript
      if [[ "$TASK_INVOLVES_JAVASCRIPT" == "true" ]]; then
        if [[ "$JAVASCRIPT_STYLE_IN_CONTEXT" == "true" ]]; then
          echo "SKIP: Re-reading this file"
          echo "NOTE: Using JavaScript style guide already in context"
        else
          echo "Loading JavaScript style guide..."
          
          # Context fetcher strategy
          if [[ "$CURRENT_AGENT" == "claude-code" && "$CONTEXT_FETCHER_EXISTS" == "true" ]]; then
            echo "USE: context-fetcher agent"
            echo "REQUEST: Get JavaScript style rules from code-style/javascript-style.yaml"
            echo "PROCESS: Returned style rules"
          else
            echo "READ: standards/code-style/javascript-style.yaml"
          fi
        fi
      else
        echo "SKIP: JavaScript style guide not relevant to current task"
      fi
  
  invocation:
    syntax: |
      ```invoke-agent
      agent: context-fetcher
      action: read
      params:
        file: "standards/code-style/javascript-style.yaml"
        return: "content_only"
      ```
```

## Code Structure

```yaml
code_structure:
  file_organization:
    - "Each file should have a single responsibility"
    - "Group related functionality together"
    - "Keep files under 300 lines where possible"
    - "Order methods by importance, with public methods first"
  
  function_organization:
    - "Keep functions focused on a single task"
    - "Limit function length to under 30 lines where possible"
    - "Use descriptive function names that indicate purpose"
    - "Order parameters from required to optional"
  
  import_organization:
    - "Group imports by type (standard library, external packages, internal modules)"
    - "Order imports alphabetically within groups"
    - "Remove unused imports"
    - "Avoid wildcard imports"
```

## Error Handling

```yaml
error_handling:
  guidelines:
    - "Use try/catch blocks for error-prone operations"
    - "Provide specific error messages with actionable information"
    - "Log errors with sufficient context for debugging"
    - "Handle errors at the appropriate level"
    - "Never silently catch errors without proper handling"
  
  logging_practices:
    - "Use appropriate log levels (debug, info, warning, error)"
    - "Include relevant context in log messages"
    - "Don't log sensitive information"
    - "Structure logs for easy parsing and analysis"
```

## Code Quality Standards

```yaml
code_quality:
  principles:
    - id: "DRY"
      name: "Don't Repeat Yourself"
      description: "Avoid code duplication by extracting common functionality"
    
    - id: "SOLID"
      name: "SOLID Principles"
      description: "Follow Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, and Dependency Inversion principles"
    
    - id: "KISS"
      name: "Keep It Simple, Stupid"
      description: "Prefer simple solutions over complex ones"
    
    - id: "YAGNI"
      name: "You Ain't Gonna Need It"
      description: "Don't implement features until they are actually needed"
  
  code_review_checklist:
    - "Does the code follow style guidelines?"
    - "Is the code readable and maintainable?"
    - "Are edge cases handled appropriately?"
    - "Is error handling implemented correctly?"
    - "Are there appropriate tests?"
    - "Is the code efficient and performant?"
```

## Language Selection Guide

```yaml
language_selection:
  - type: "Backend APIs"
    recommended: "C# with .NET"
    alternatives: ["Node.js with TypeScript", "Python with FastAPI"]
    
  - type: "Frontend Web Applications"
    recommended: "TypeScript with Angular"
    alternatives: ["TypeScript with React", "TypeScript with Vue"]
    
  - type: "Data Processing"
    recommended: "Python with Pandas/NumPy"
    alternatives: ["C# with ML.NET", "TypeScript with TensorFlow.js"]
    
  - type: "DevOps Automation"
    recommended: "PowerShell or Bash"
    alternatives: ["Python", "TypeScript"]
```
